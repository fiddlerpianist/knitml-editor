grammar com.knitml.dsl.KnittingExpressionLanguage hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate knittingExpressionLanguage "http://www.knitml.com/dsl/KnittingExpressionLanguage"

Pattern:
	LF*
	(((header=Header LF+)? operations+=BlockOperation (LF* operations+=BlockOperation)*) |
	('PARAGRAPHS' LF+ (header=Header LF+)?
	((sections+=Section (LF+ sections+=Section)*) |
	(instructionGroups+=InstructionGroupWithSections (LF+ instructionGroups+=InstructionGroupWithSections)*))) |
	(instructionGroups+=InstructionGroup (LF* instructionGroups+=InstructionGroup)*))
	LF*;

	// header elements
Header:
	'Pattern name: ' patternName=(ID | STRING) LF
	'Description: ' description=STRING LF
	(('Language: ' (languageEnum=Language | languageCode=ID) LF)? &
	('Dimensions: ' dimensions=STRING LF)? &
	('Gauge: ' gauge=Gauge LF)? &
	('Author: ' author=STRING LF)? &
	('Techniques: ' techniques+=STRING (techniques+=STRING)* LF)? &
	('Copyright: ' copyright=STRING LF)? &
	('Needles:' LF
	needleTypes+=NeedleType LF
	(needleTypes+=NeedleType LF)*)? &
	('Yarn:' LF
	yarnTypes+=SingleYarnType LF
	(yarnTypes+=SingleYarnType LF)*)? &
	('Accessories:' accessories=STRING LF)?);

NeedleType:
	((','? style=NeedleStyle)? &
	(','? ('Size' | 'size') (sizeValue=INT | sizeZerosValue=MULTIPLE_ZEROS | sizeDecimalValue=DECIMAL)
	sizeUnit=NeedleSizeUnit)? &
	(','? 'brand' brand=(ID | STRING))? &
	(','? lengthValue=INT lengthUnit=LengthUnit 'long'?)?) LF
	needles+=Needle (LF? needles+=Needle)*;

Needle:
	name=ID label=STRING ('(' withKey=WithKey ')')?;

	//YarnType:
//	(
//	(','? 'brand'? brand=(ID | STRING) 'brand'?)? &
//	(','? 'name' category=(ID | STRING))? &
//	(','? 'line' subcategory=(ID | STRING))? &
//	(','? '#' (catalogId=(ID | STRING) | catalogNumber=INT) )? &
//	(','? 'weight' weight=(ID | STRING))? &
//	(','? lengthValue=INT lengthUnit=LengthUnit 'long'?)?) LF
//	yarns+=Yarn (LF? yarn+=Yarn)*;
SingleYarnType:
	(weightValue=INT weightUnit=WeightUnit)?
	('(' lengthValue=INT lengthUnit=LengthUnit ')')?
	'of'?
	(brand=(ID | STRING))?
	('('
	('(' 'name' category=(ID | STRING) ')')?
	(',' 'line' subcategory=(ID | STRING))?
	(','? '#' (catalogId=(ID | STRING) | catalogNumber=INT))?
	(','? 'weight' weight=(ID | STRING))?
	')')?
	LF yarns+=Yarn (LF? yarn+=Yarn)*;

Yarn:
	name=ID label=STRING ('(' withKey=WithKey ')')?;

Gauge:
	(stitchValue=INT | stitchDecimalValue=DECIMAL) stitchUnit=StitchGaugeUnit (',' (rowValue=INT |
	rowDecimalValue=DECIMAL) rowUnit=RowGaugeUnit)?;

Section:
	elements+=BlockOperation+;

InstructionGroup:
	'Group' name=ID label=STRING? ('(' (withKey=WithKey)? (','? reset?='reset' 'count'?)? ')')? ':' LF+
	operations+=BlockOperation (LF* operations+=BlockOperation)*;

InstructionGroupWithSections:
	'Group' name=ID label=STRING? ('(' (withKey=WithKey)? (','? reset?='reset' 'count'?)? ')')? ':' LF+
	(operations+=Section (LF+ operations+=Section)*);

	// block operations
BlockOperation:
	(UseNeedles | UseSilentNeedles | CastOn | Instruction | InstructionRef | Row | RepeatInstruction | Message |
	JoinInRound);

UseNeedles:
	UseNeedlesRule => LF?;

UseSilentNeedles:
	'(' UseNeedlesRule ')' => LF?;

UseNeedlesRule:
	('Use' | 'use') needles+=[Needle] (',' needles+=[Needle])*;

CastOn:
	('Cast on' | 'cast on' | 'CO' | 'co') value=INT StitchLiteral? ('with' yarnRef=ID)? ('using' 'the' style=ID 'method')?
	(countAsRow?='(count as row)')? => LF?;

Instruction:
	'Instruction' name=ID label=STRING? ('(' (withKey=WithKey)? (','? shape=('round' | 'flat') 'shape'?)? (','?
	rowCount=INT ('rows' | 'rounds')?)? ')')? (('{' LF* rows+=Row (LF* rows+=Row)* LF* '}' => LF?) | (':' LF rows+=Row+
	LF));

InstructionRef:
	'Work' instruction=[Instruction] 'instruction'?;

MergedInstruction:
	'Merge' instruction+=[Instruction] 'instruction'? 'with' instruction+=[Instruction] 'at' 'row';

Row:
	nextRow?='Next'? (shortRow?='Short'? & longRow?='Long'?) label=('Row' | 'Round' | 'Rows' | 'Rounds') (range=Range |
	(number+=INT (',' number+=INT)* ('and' 'all'? subsequent=('even' | 'odd') ('rows' | 'rounds')?)?))? (side=('WS' |
	'RS')? & ('with' yarnRef=ID)?) ('(' (','? inform?='inform' 'side'?)? (','? reset?='reset' 'count'?)? ')')? ':' LF?
	operations+=InlineOperation (',' LF? operations+=InlineOperation)* (',' stateStitches?='state' numberToState=INT?
	StitchLiteral?)? (',' followupMessage=STRING)? => LF?;

RepeatInstruction:
	('Repeat' | 'repeat') instruction=[Instruction] (('for' desiredLength?='desired length') | ('until' value=INT ('st' |
	'sts') remain?='remain') |
	// TODO: difficult! (value=INT ('st' | 'sts') remainOnNeedles?='remain on' ('needle' | 'needles')) |
	// TODO: UNTIL_EQUALS
	(('for' | ('until' 'measures')) (value=INT | decimalValue=DECIMAL) unit=LengthUnit) | (value=INT
	additionalTimes?=('additional' | 'more') 'times')) => LF?;

Message:
	label=STRING ('(' 'key'? messageKey=(ID | STRING) ')')? => LF?;

JoinInRound:
	{JoinInRound} 'Join' 'together'? 'in' 'round' => LF?;

	// Inline Operations
InlineOperation:
	(Knit | Purl | Slip | Repeat | BindOff);

Knit:
	('K' | 'k' | 'Knit' | 'knit') {Knit} number=INT? StitchLiteral? (together?=('tog')? & throughTrailingLoop?=('tbl' |
	'ttl')?) ('with' yarnRef=ID)? ('to'? repeat=RepeatSpec)?;

Purl:
	('P' | 'p' | 'Purl' | 'purl') {Purl} number=INT? StitchLiteral? (together?=('tog')? & throughTrailingLoop?=('tbl' |
	'ttl')?) ('with' yarnRef=ID)? ('to'? repeat=RepeatSpec)?;

Slip:
	{Slip} reverse?=('Rev' | 'Reverse' | 'rev' | 'reverse')? ('Sl' | 'sl' | 'Slip' | 'slip') ((number=INT StitchLiteral?)
	| 'next st')? wise=Wise? yarnPosition=('wyif' | 'wyib')?;

Repeat:
	(('Repeat' | 'repeat') '[' operations+=InlineOperation (',' operations+=InlineOperation)* ']' 'to'? spec=RepeatSpec) |
	('[' operations+=InlineOperation (',' operations+=InlineOperation)* ']' (',' ('Repeat' | 'repeat'))? 'to'?
	spec=RepeatSpec);

BindOff:
	('Bind off' | 'bind off' | 'BO' | 'bo') (all?='all' | value=INT) StitchLiteral? wise=Wise? ('with' yarnRef=ID)?;

RepeatSpec:
	(toEnd?=('end') | toMarker?=('marker') | (value=INT StitchLiteral? beforeEnd?=('before end')) | (value=INT
	StitchLiteral? beforeGap?=('before gap')) | (value=INT StitchLiteral? beforeMarker?=('before marker')) | (value=INT
	times?=('times')));

	// lower-level data types
enum Language:
	EN='English' | ES='Spanish' | FR='French';

enum LengthUnit:
	INCH='in' | CM='cm' | INCH='ins' | INCH='inch' | INCH='inches' | CM='cms' | CM='centimeter' | CM='centimeters';

enum WeightUnit:
	GRAM='g' | OUNCE='oz' | GRAM='gram' | GRAM='grams' | OUNCE='ounce' | OUNCE='ounces';

enum StitchGaugeUnit:
	STITCHES_PER_INCH='st/in' | STITCHES_PER_CENTIMETER='st/cm' |
	STITCHES_PER_INCH='sts/in' | STITCHES_PER_CENTIMETER='sts/cm';

enum RowGaugeUnit:
	ROWS_PER_INCH='row/in' | ROWS_PER_CENTIMETER='row/cm' |
	ROWS_PER_INCH='rows/in' | ROWS_PER_CENTIMETER='rows/cm';

enum NeedleSizeUnit:
	US='US' | MILLIMETERS='mm';

enum NeedleStyle:
	STRAIGHT='straight' |
	CIRCULAR='circular' |
	DPN='dpn' |
	DPN='dpns' |
	CIRCULAR='circ' |
	CIRCULAR='circulars';

enum Wise:
	NONE='default' | KNITWISE='kw' | PURLWISE='pw' |
	KNITWISE='knitwise' | PURLWISE='purlwise';

StitchLiteral returns ecore::EString:
	'st' | 'sts' | 'stitch' | 'stitches';

WithKey:
	{WithKey} 'with' 'key' messageKey=STRING?;

Range:
	min=INT '-' max=INT;

	// Terminals
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '-')+;

terminal DECIMAL returns ecore::EDoubleObject:
	('0'..'9')+ '.' ('0'..'9')+;

terminal MULTIPLE_ZEROS returns ecore::EString:
	'0' '0'+;

terminal INT returns ecore::EIntegerObject:
	('0'..'9')+;

terminal STRING:
	'"' ('\\'
	('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') |
	!('\\' | '"'))* '"' |
	"'" ('\\'
	('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') |
	!('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

	//terminal SL_COMMENT:
//	'//' !('\n' | '\r')* ('\r'? '\n')?;
terminal SL_COMMENT:
	'--' !('\n' | '\r')* ('\r'? '\n')?;

terminal LF:
	'\r'? '\n';

terminal WS:
	(' ' | '\t')+;

terminal ANY_OTHER:
	.;
