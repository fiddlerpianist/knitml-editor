grammar com.knitml.dsl.KnittingExpressionLanguage hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate knittingExpressionLanguage "http://www.knitml.com/dsl/KnittingExpressionLanguage"

Pattern:
	LF* elements+=BlockOperation (LF* elements+=BlockOperation)* LF*;

	// block operations
BlockOperation:
	(CastOn | Instruction | Row | RepeatInstruction | Message);

CastOn:
	('Cast on' | 'cast on' | 'CO' | 'co') value=INT StitchLiteral? ('with' yarnRef=ID)?
	('using the' style=ID 'method')?
	(countAsRow?='(count as row)')?;

Instruction:
	'Instruction' name=ID label=STRING?
	('('
	(withKey=WithKey)?
	(','? shape=('round' | 'flat') 'shape'?)?
	(','? rowCount=INT ('rows' | 'rounds')?)?
	')')?
	(('{' LF* rows+=Row (LF* rows+=Row)* LF* '}' => LF?) | (':' LF rows+=Row+ LF));

Row:
	nextRow?='Next'? (shortRow?='Short'? & longRow?='Long'?)
	label=('Row' | 'Round' | 'Rows' | 'Rounds')
	(range=Range | (number+=INT (',' number+=INT)*
	('and' 'all'? subsequent=('even' | 'odd') ('rows' | 'rounds')?)?))?
	(side=('WS' | 'RS')? & ('with' yarnRef=ID)?)
	('(' (','? inform?='inform' 'side'?)? (','? reset?='reset' 'count'?)? ')')?
	':' LF? operations+=InlineOperation (','
	operations+=InlineOperation)* => LF?;

RepeatInstruction:
	('Repeat' | 'repeat') instruction=[Instruction]
	(('for' desiredLength?='desired length') |
	('until' value=INT ('st' | 'sts') remain?='remain') |
	// TODO: difficult! (value=INT ('st' | 'sts') remainOnNeedles?='remain on' ('needle' | 'needles')) |
	// TODO: UNTIL_EQUALS
	(('for' | ('until' 'measures')) (value=INT | decimalValue=DECIMAL) unit=UnitOfMeasure) |
	(value=INT additionalTimes?=('additional' | 'more') 'times'))
	=> LF?;

Message:
	message=STRING ('(' withKey=WithKey ')')? => LF?;

	// Inline Operations
InlineOperation:
	(Knit | Purl | Slip | Repeat | BindOff);

Knit:
	('K' | 'k' | 'Knit' | 'knit') {Knit} number=INT? StitchLiteral? (together?=('tog')? & throughTrailingLoop?=('tbl' |
	'ttl')?) ('with' yarnRef=ID)? ('to'? repeat=RepeatSpec)?;

Purl:
	('P' | 'p' | 'Purl' | 'purl') {Purl} number=INT? StitchLiteral? (together?=('tog')? & throughTrailingLoop?=('tbl' |
	'ttl')?) ('with' yarnRef=ID)? ('to'? repeat=RepeatSpec)?;

Slip:
	{Slip} reverse?=('Rev' | 'Reverse' | 'rev' | 'reverse')? ('Sl' | 'sl' | 'Slip' | 'slip') ((number=INT StitchLiteral?)
	| 'next st')? wise=Wise? yarnPosition=('wyif' | 'wyib')?;

Repeat:
	(('Repeat' | 'repeat') '[' operations+=InlineOperation (',' operations+=InlineOperation)* ']' 'to'? spec=RepeatSpec)
	| ('[' operations+=InlineOperation (',' operations+=InlineOperation)* ']' (',' ('Repeat' | 'repeat'))? 'to'?
	spec=RepeatSpec);

BindOff:
	('Bind off' | 'bind off' | 'BO' | 'bo') (all?='all' | value=INT) StitchLiteral? wise=Wise? ('with' yarnRef=ID)?;

RepeatSpec:
	(toEnd?=('end') | toMarker?=('marker') | (value=INT StitchLiteral? beforeEnd?=('before end')) | (value=INT
	StitchLiteral? beforeGap?=('before gap')) | (value=INT StitchLiteral? beforeMarker?=('before marker')) | (value=INT
	times?=('times')));

	// lower-level data types
enum UnitOfMeasure:
	INCH='in' | INCH='ins' | INCH='inch' | INCH='inches' | CM='cm' | CM='cms' | CM='centimeter' | CM='centimeters';

enum Wise:
	NONE='default' | KNITWISE='kw' | KNITWISE='knitwise' | PURLWISE='pw' | PURLWISE='purlwise';

StitchLiteral returns ecore::EString:
	'st' | 'sts' | 'stitch' | 'stitches';

WithKey:
	{WithKey} 'with' 'key' messageKey=STRING?;

Range:
	min=INT '-' max=INT;

	// Terminals
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '-')+;

terminal DECIMAL returns ecore::EDoubleObject:
	('0'..'9')+ '.' ('0'..'9')+;

terminal INT returns ecore::EIntegerObject:
	('0'..'9')+;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' | "'" ('\\' ('b' | 't' | 'n' |
	'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

	//terminal SL_COMMENT:
//	'//' !('\n' | '\r')* ('\r'? '\n')?;
terminal SL_COMMENT:
	'--' !('\n' | '\r')* ('\r'? '\n')?;

terminal LF:
	(EOF | ('\r'? '\n'));

terminal WS:
	(' ' | '\t')+;

terminal ANY_OTHER:
	.;
