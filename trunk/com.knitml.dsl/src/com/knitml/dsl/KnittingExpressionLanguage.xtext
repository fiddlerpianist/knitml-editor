grammar com.knitml.dsl.KnittingExpressionLanguage hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate knittingExpressionLanguage "http://www.knitml.com/dsl/KnittingExpressionLanguage"

// Top-level document structure
Pattern:
	LF*
	('NO PARAGRAPHS' LF+ (header=Header LF+)? ((operations+=BlockOperation (LF* operations+=BlockOperation)*) |
	(instructionGroups+=InstructionGroup (LF* instructionGroups+=InstructionGroup)*)) |
	(('PARAGRAPHS' LF+)? (header=Header LF+)?
	((sections+=Section (LF+ sections+=Section)*) |
	(instructionGroups+=InstructionGroupWithSections (LF* instructionGroups+=InstructionGroupWithSections)*))))
	LF*;

	// Header elements
Header:
	'Pattern name:' patternName=(ID | STRING) LF
	'Description:' LF? description=STRING LF
	(('Language:' (languageEnum=Language | languageCode=ID) LF)? &
	('Translations' (':' | 'in')? resource=STRING LF)? &
	('Dimensions:' LF? dimensions=STRING LF)? &
	('Gauge:' LF? gauge=Gauge LF)? &
	('Author:' LF? author=STRING LF)? &
	('Techniques:' LF? techniques+=STRING (techniques+=STRING)* LF)? &
	('Copyright:' LF? copyright=STRING LF)? &
	('Needles:' LF
	(needleTypes+=NeedleType LF (needleTypes+=NeedleType LF)*))? &
	('Yarn:' LF?
	(yarnTypes+=YarnType LF (yarnTypes+=YarnType LF)*))? &
	('Stitch'? 'Holders:' LF
	(stitchHolders+=StitchHolder LF (stitchHolders+=StitchHolder LF)*))? &
	(imports+=Import)* &
	('Instructions:' LF
	instructions+=(InstructionDefinitionRule | InlineInstructionDefinitionRule | MergedInstructionDefinitionRule)+)?);

	// Needles
NeedleType:
	((','? style=NeedleStyle)? &
	(','? ('Size' | 'size') (sizeValue=INT | sizeZerosValue=MULTIPLE_ZEROS | sizeDecimalValue=DECIMAL)
	sizeUnit=NeedleSizeUnit)? &
	(','? 'brand' brand=(ID | STRING))? &
	(','? lengthValue=INT lengthUnit=LengthUnit 'long'?)?) LF
	(needles+=Needle (LF? needles+=Needle)*);

Needle:
	name=ID label=STRING? ('(' withKey=WithKey ')')?;

	// Yarn
YarnType:
	(SingleYarnWithYarnType | MultipleYarnsWithYarnType);

SingleYarnWithYarnType returns Yarn:
	quantitySpec=WeightAndLengthSpec
	'of' yarnTypeSpec=YarnTypeSpec
	('in' 'color'? color=YarnColor)?
	('named' name=ID)?
	withKey=WithKey?;

MultipleYarnsWithYarnType:
	yarnTypeSpec=YarnTypeSpec
	(LF yarns+=YarnRule (','? LF? yarns+=YarnRule)*)?;

YarnRule returns Yarn:
	((quantitySpec=WeightAndLengthSpec ':') |
	('in' 'color'? color=YarnColor ':') |
	((quantitySpec=WeightAndLengthSpec) ('in' color=YarnColor) ':'))?
	'yarn'? name=ID withKey=WithKey?;

Yarn:
	name=ID
	quantitySpec=WeightAndLengthSpec
	color=YarnColor
	withKey=WithKey
	yarnTypeSpec=YarnTypeSpec;

WeightAndLengthSpec:
	((weightValue=INT weightUnit=WeightUnit) |
	(lengthValue=INT lengthUnit=LengthUnit) |
	(weightValue=INT weightUnit=WeightUnit
	'(' lengthValue=INT lengthUnit=LengthUnit ')'));

YarnTypeSpec:
	((brand=STRING) |
	(brand=STRING category=STRING) |
	(brand=STRING category=STRING subcategory=STRING) |
	weight=(ID | STRING) 'weight' 'yarn'?)
	('#' (catalogId=(ID | STRING) | catalogNumber=INT))?
	('('
	(weight=(ID | STRING) 'weight')?
	(','? ('ball' | 'skein') 'weight: ' ballWeightValue=INT ballWeightUnit=WeightUnit)?
	(','? ('ball' | 'skein') 'length: ' ballLengthValue=INT ballLengthUnit=LengthUnit)?
	(','? 'yarn'? 'thickness: ' thicknessValue=INT thicknessUnit=ThicknessUnit)?
	')')?;

YarnColor:
	colorName=(ID | STRING)
	('(' colorNumber=INT ')')?;

Gauge:
	(stitchValue=INT | stitchDecimalValue=DECIMAL) stitchUnit=StitchGaugeUnit (',' (rowValue=INT |
	rowDecimalValue=DECIMAL) rowUnit=RowGaugeUnit)?;

StitchHolder:
	name=ID label=STRING? ('(' withKey=WithKey ')')?;

Import:
	'Import' 'from' location=(ID | STRING) ':' LF
	assignments+=(YarnAssignment | InstructionAssignment | InlineInstructionAssignment)+;

YarnAssignment:
	'Yarn' from=ID 'as' yarn=[Yarn] LF;

InstructionAssignment returns Instruction:
	'Instruction' from=ID 'as' name=ID LF;

InlineInstructionAssignment returns InlineInstruction:
	'Inline' 'instruction' from=ID 'as' name=ID LF;

InstructionDefinitionRule returns Instruction:
	'Instruction' name=ID label=STRING?
	'(' (withKey=WithKey)?
	(','? shape=('round' | 'flat') 'shape'?)
	(','? rowCount=INT ('rows' | 'rounds'))?
	(','? startingStitchCount=INT 'starting'? StitchLiteral)?
	')' ':' LF
	rows+=Row+;

InlineInstructionDefinitionRule returns InlineInstruction:
	name=ID label=STRING? (withKey=WithKey)? ':' LF?
	operations+=InlineOperation (',' operations+=InlineOperation)* LF;

MergedInstructionDefinitionRule returns Instruction:
	merged?='Merged' ('Instruction' | 'instruction') name=ID label=STRING? ('(' (withKey=WithKey)? ')')?
	':' ('join' | 'merge') instruction1=[Instruction] ('together'? 'with' | 'and') instruction2=[Instruction] 'at'
	mergePoint=('row' | 'round' | 'end') LF;

	// directions elements
Section:
	elements+=BlockOperation+;

InstructionGroup:
	'Group' name=ID label=STRING? (('(' withKey=WithKey ')') |
	('(' reset?='reset' 'count' ')') |
	('(' withKey=WithKey ',' reset?='reset' 'count' ')'))? ':' LF+
	(operations+=BlockOperation (LF* operations+=BlockOperation)*);

InstructionGroupWithSections:
	'Group' name=ID label=STRING? (('(' withKey=WithKey ')') |
	('(' reset?='reset' 'count' ')') |
	('(' withKey=WithKey ',' reset?='reset' 'count' ')'))? ':' LF+
	(operations+=Section (LF+ operations+=Section)*);

	// block operations
BlockOperation:
	(UseNeedles | UseSilentNeedles | ArrangeStitches | CastOn | PickUpStitches | InstructionRule | InstructionRef | Row |
	RepeatInstruction | Message | StateStitches | JoinInRound | BeginKnittingNewShape | LabelNeedle | Graft);

UseNeedles:
	'Use' needles+=[Needle] (',' needles+=[Needle])* => LF;

UseSilentNeedles:
	'(' 'Use' needles+=[Needle] (',' needles+=[Needle])* ')' => LF;

ArrangeStitches:
	'Arrange' StitchLiteral? ('as' 'follows')? ':' LF?
	needleStitchCount+=NeedleStitchCount
	((',' | LF) needleStitchCount+=NeedleStitchCount)* => LF;

NeedleStitchCount:
	needle=[Needle] ':' numberOfStitches=INT;

CastOn:
	(('Cast' 'on') | 'CO' | 'co') value=INT StitchLiteral? ('with' yarnRef=[Yarn])? ('using' 'the' style=ID 'method')?
	(countAsRow?='(count as row)')? => LF;

PickUpStitches:
	'Pick' 'up' number=INT StitchLiteral? wise=Wise? ('with'? yarnRef=[Yarn])? => LF;

InstructionRule returns Instruction:
	'Instruction' name=ID label=STRING? ('(' (withKey=WithKey)? (','? shape=('round' | 'flat') 'shape'?)? (','?
	rowCount=INT ('rows' | 'rounds')?)? ')')? (('{' LF* (rows+=Row (LF* rows+=Row)*) LF* '}' => LF) |
	(':' LF (rows+=Row+ | forEachRow=ForEachRowInInstruction) LF));

Instruction:
	name=ID
	label=STRING
	withKey=WithKey
	shape=STRING
	rowCount=INT
	rows+=Row;

InstructionRef:
	'Work' instruction=[Instruction] 'instruction'?;

ForEachRowInInstruction:
	(('Work' 'for') | 'For') 'each' ('row' | 'round') 'in' instruction=[Instruction] 'instruction'? ':' LF?
	((operations+=InlineOperation (',' LF? operations+=InlineOperation)*) | (operations+=UsingNeedle (LF
	operations+=UsingNeedle)*)) (',' LF? stateStitches?='state' numberToState=INT? StitchLiteral?)? => LF;

Row:
	nextRow?='Next'? (shortRow?='Short'? & longRow?='Long'?) label=('Row' | 'Round' | 'Rows' | 'Rounds')
	((range+=Range | number+=INT) (',' (range+=Range | number+=INT))*
	('and' 'all'? subsequent=('even' | 'odd') ('rows' | 'rounds')?)?)?
	(side=('WS' | 'RS')? &
	('with' yarnRef=[Yarn])?) ('(' (','? inform?='state' 'side')? (','? reset?='reset' 'count'?)?
	')')? ':' LF?
	((operations+=InlineOperation (',' LF? operations+=InlineOperation)*) | (operations+=UsingNeedle (LF
	operations+=UsingNeedle)*)) (',' LF? stateStitches?='state' numberToState=INT? StitchLiteral?)? (',' LF?
	followupMessage=STRING)? => LF?;

RepeatInstruction:
	'Repeat' instruction=[Instruction] (('for' desiredLength?='desired length') | ('until' value=INT ('st' | 'sts')
	remain?='remain') |
	// TODO: difficult! (value=INT ('st' | 'sts') remainOnNeedles?='remain on' ('needle' | 'needles')) |
	// TODO: UNTIL_EQUALS
	(('for' | ('until' 'measures')) (value=INT | decimalValue=DECIMAL) unit=LengthUnit) | (value=INT
	additionalTimes?=('additional' | 'more') TimesLiteral)) => LF;

Message:
	label=STRING ('(' 'key'? messageKey=(ID | STRING) ')')? => LF;

StateStitches:
	{StateStitches} 'State' numberToState=INT? StitchLiteral ('remain' | 'remaining' | 'left')? => LF;

JoinInRound:
	{JoinInRound} 'Join' StitchLiteral? 'together'? 'in' 'round' => LF;

BeginKnittingNewShape:
	'Begin' 'knitting'
	((shape='flat' 'with' side=('WS' | 'RS') 'row'? 'next') |
	('in' 'the' shape='round')) => LF;

LabelNeedle:
	'Label' needle=[Needle] 'as' label=STRING ('(' withKey=WithKey ')')? => LF;

Graft:
	'Graft' 'together'? (StitchLiteral 'from')? firstNeedle=[Needle] 'and' secondNeedle=[Needle] => LF;

	// Inline Operations
InlineOperation:
	(InlinePickUpStitches | InlineCastOn |
	Knit | Purl | WorkEven | Slip | NoStitch |
	Decrease | DoubleDecrease | PassPreviousStitchOver |
	Increase | CrossStitches | FromStitchHolder |
	PlaceMarker | RemoveMarker | EndOfRow |
	Repeat | OperationGroup | BindOff | Turn |
	InlineInstructionRule | InlineInstructionRef | ApplyNextRow);

InlinePickUpStitches:
	'pick' 'up' number=INT StitchLiteral? wise=Wise? ('with'? yarnRef=[Yarn])?;

InlineCastOn:
	(('cast' 'on') | 'co') value=INT StitchLiteral? ('with' yarnRef=[Yarn])?;

Knit:
	((('K' | 'k') number=INT (together?='tog')?) |
	(('Knit' | 'knit') number=INT StitchLiteral? (together?='tog')?) |
	({Knit} ('K' | 'k' | 'Knit' | 'knit')))
	throughTrailingLoop?=('tbl' | 'ttl')?
	('with'? yarnRef=[Yarn])? ('to'? repeat=RepeatSpec)?;

Purl:
	((('P' | 'p') number=INT (together?='tog')?) |
	(('Purl' | 'purl') number=INT StitchLiteral? (together?='tog')?) |
	({Purl} ('P' | 'p' | 'Purl' | 'purl')))
	throughTrailingLoop?=('tbl' | 'ttl')?
	('with'? yarnRef=[Yarn])? ('to'? repeat=RepeatSpec)?;

WorkEven:
	{WorkEven} ('Work' | 'work') 'even'?
	('with' yarnRef=[Yarn])? ('to'? repeat=RepeatSpec)?;

Slip:
	({Slip} reverse?=('Rev' | 'Reverse' | 'rev' | 'reverse')? SlipLiteral 'next'? number=INT? StitchLiteral? wise=Wise?
	yarnPosition=('wyif' | 'wyib')?) |
	({Slip} SlipLiteral 'next'? number=INT StitchLiteral? ('to' holder=[StitchHolder]));

NoStitch:
	{NoStitch} ('NS' | 'ns' | 'Ns') number=INT?;

Decrease:
	type=DecreaseType (number=INT TimesLiteral?)? ('with'? yarnRef=[Yarn])?;

DoubleDecrease:
	type=DoubleDecreaseType (number=INT TimesLiteral?)? ('with'? yarnRef=[Yarn])?;

PassPreviousStitchOver:
	{PassPreviousStitchOver} 'ppso' (number=INT TimesLiteral?)?;

Increase:
	type=IncreaseType (number=INT TimesLiteral?)? ('with'? yarnRef=[Yarn])?;

CrossStitches:
//	'cross' 'next'? first=INT StitchLiteral?
//	(direction='behind' |
//	('in' direction='front' 'of')) ('next' | 'following')?
//	next=INT StitchLiteral?;
	first=INT '/' second=INT ('/' third=INT)? direction=CrossType ('[' operations+=InlineOperation (','
	operations+=InlineOperation)* ']');

PlaceMarker:
	{PlaceMarker} (('place' 'marker') | 'pm');

RemoveMarker:
	{RemoveMarker} (('remove' 'marker') | 'rm');

EndOfRow:
	{EndOfRow} ('end' 'of' ('row' | 'round'));

InlineInstructionRule returns InlineInstruction:
	'instruction' name=ID label=STRING? ('(' (withKey=WithKey) ')')? ':' LF? '[' operations+=InlineOperation (','
	operations+=InlineOperation)* ']';

InlineInstruction:
	name=ID label=STRING withKey=WithKey operations+=InlineOperation;

InlineInstructionRef:
	referencedInstruction=[InlineInstruction];

ApplyNextRow:
	'apply' 'next' ('row' | 'round') 'of' referencedInstruction=[Instruction] 'instruction'?;

Repeat:
	(('Repeat' | 'repeat') '[' operations+=InlineOperation (',' operations+=InlineOperation)* ']' 'to'? spec=RepeatSpec) |
	('[' operations+=InlineOperation (',' LF? operations+=InlineOperation)* ']' (',' ('Repeat' | 'repeat'))? 'to'?
	spec=RepeatSpec);

OperationGroup:
	('Group' | 'group') ('of' size=INT StitchLiteral?)? ('[' operations+=InlineOperation (','
	operations+=InlineOperation)* ']');

FromStitchHolder:
	('From' | 'from') holder=[StitchHolder] ':'? LF? ('[' operations+=InlineOperation (',' operations+=InlineOperation)*
	']');

BindOff:
	('Bind off' | 'bind off' | 'BO' | 'bo') (all?='all' | value=INT) StitchLiteral? wise=Wise? ('with' yarnRef=[Yarn])?;

RepeatSpec:
	(toEnd?=('end') | toMarker?=('marker') | (value=INT StitchLiteral? beforeEnd?=('before end')) | (value=INT
	StitchLiteral? beforeGap?=('before gap')) | (value=INT StitchLiteral? beforeMarker?=('before marker')) | (value=INT
	times?=(TimesLiteral)) | (twice?='twice') | (times?='x' value=INT));

Turn:
	{Turn} 'turn' (stateUnworked?='(' 'state' number=INT? 'unworked' StitchLiteral? ')')?;

UsingNeedle:
	'Using' needle=[Needle] ':' LF? (operations+=InlineOperation (',' LF? operations+=InlineOperation)*);

	// lower-level data types
enum CrossType:
	LEFT='LC' | RIGHT='RC' | LEFT_FRONT='LRC' | RIGHT_FRONT='RRC';

enum DecreaseType:
	SSK='ssk' | SSP='ssp' | SKP='skp';

enum DoubleDecreaseType:
	SSSK='sssk' | CDD='cdd' | SK2P='sk2p' | CDD='s2kp';

enum IncreaseType:
	M1='m1' | M1P='m1p' | M1A='m1a' | M1T='m1t' | M1L='m1l' | M1R='m1r' | M1LP='m1lp' | M1RP='m1rp' | KLL='kll' |
	KRL='krl' | PLL='pll' | PRL='prl' | KFB='kfb' | PFB='pfb' | MOSS='moss' | DECORATIVE='decorative' | YO='yo';

enum Language:
	EN='English' | ES='Spanish' | FR='French';

enum LengthUnit:
	INCH='in' | CM='cm' | YARD='yd' | METER='m' | INCH='ins' | INCH='inch' | INCH='inches' | CM='cms' | CM='centimeter' |
	CM='centimeters' | YARD='yds';

enum WeightUnit:
	GRAM='g' | OUNCE='oz' | GRAM='gram' | GRAM='grams' | OUNCE='ounce' | OUNCE='ounces';

enum ThicknessUnit:
	WRAPS_PER_INCH='wrap/in' | WRAPS_PER_CENTIMETER='wrap/cm' | WRAPS_PER_INCH='wraps/in' | WRAPS_PER_INCH='wraps/inch' |
	WRAPS_PER_INCH='wpi' | WRAPS_PER_CENTIMETER='wraps/cm';

enum StitchGaugeUnit:
	STITCHES_PER_INCH='st/in' | STITCHES_PER_CENTIMETER='st/cm' |
	STITCHES_PER_INCH='sts/in' | STITCHES_PER_CENTIMETER='sts/cm';

enum RowGaugeUnit:
	ROWS_PER_INCH='row/in' | ROWS_PER_CENTIMETER='row/cm' |
	ROWS_PER_INCH='rows/in' | ROWS_PER_CENTIMETER='rows/cm';

enum NeedleSizeUnit:
	US='US' | MILLIMETERS='mm';

enum NeedleStyle:
	STRAIGHT='straight' |
	CIRCULAR='circular' |
	DPN='dpn' |
	DPN='dpns' |
	CIRCULAR='circ' |
	CIRCULAR='circulars';

enum Wise:
	NONE='default' | KNITWISE='kw' | PURLWISE='pw' |
	KNITWISE='knitwise' | PURLWISE='purlwise';

StitchLiteral returns ecore::EString:
	'st' | 'sts' | 'stitch' | 'stitches';

SlipLiteral returns ecore::EString:
	'Sl' | 'sl' | 'Slip' | 'slip';

TimesLiteral returns ecore::EString:
	'time' | 'times';

WithKey:
	{WithKey} 'with' 'key' messageKey=STRING?;

Range:
	min=INT '-' max=INT;

	// Terminals
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '-')+;

terminal DECIMAL returns ecore::EDoubleObject:
	('0'..'9')+ '.' ('0'..'9')+;

terminal MULTIPLE_ZEROS returns ecore::EString:
	'0' '0'+;

terminal INT returns ecore::EIntegerObject:
	('0'..'9')+;

terminal STRING:
	'"' ('\\'
	('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') |
	!('\\' | '"'))* '"' |
	"'" ('\\'
	('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') |
	!('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'--' !('\n' | '\r')* ('\r'? '\n')?;

terminal LF:
	('\r'? '\n') | EOF;

terminal WS:
	(' ' | '\t')+;

terminal ANY_OTHER:
	.;
