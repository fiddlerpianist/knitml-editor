grammar com.knitml.dsl.KnittingExpressionLanguage hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate knittingExpressionLanguage "http://www.knitml.com/dsl/KnittingExpressionLanguage"

// Top-level document structure
Pattern:
	LF*
	(((header=Header LF+)? operations+=BlockOperation (LF* operations+=BlockOperation)*) |
	('PARAGRAPHS' LF+ (header=Header LF+)?
	((sections+=Section (LF+ sections+=Section)*) |  
	(instructionGroups+=InstructionGroupWithSections (LF+ instructionGroups+=InstructionGroupWithSections)*))) |
	('GROUPS' LF+ (header=Header LF+)? instructionGroups+=InstructionGroup (LF* instructionGroups+=InstructionGroup)*))
	LF*;

	// Header elements
Header:
	'Pattern name: ' patternName=(ID | STRING) LF
	'Description: ' description=STRING LF
	(('Language: ' (languageEnum=Language | languageCode=ID) LF)? &
	('Dimensions: ' dimensions=STRING LF)? &
	('Gauge: ' gauge=Gauge LF)? &
	('Author: ' author=STRING LF)? &
	('Techniques: ' techniques+=STRING (techniques+=STRING)* LF)? &
	('Copyright: ' copyright=STRING LF)? &
	('Needles:' LF
	needleTypes+=NeedleType LF
	(needleTypes+=NeedleType LF)*)? &
	('Yarn:' LF?
	yarnTypes+=YarnType LF
	(yarnTypes+=YarnType LF)*)? &
	('Accessories:' accessories=STRING LF)? &
	('Instructions:' LF	instructions+=(InstructionDefinitionRule|InlineInstructionDefinitionRule)+)?
	)
	
;

YarnType:
	(SingleYarnWithYarnType | MultipleYarnsWithYarnType);

	// Needles
NeedleType:
	((','? style=NeedleStyle)? &
	(','? ('Size' | 'size') (sizeValue=INT | sizeZerosValue=MULTIPLE_ZEROS | sizeDecimalValue=DECIMAL)
	sizeUnit=NeedleSizeUnit)? &
	(','? 'brand' brand=(ID | STRING))? &
	(','? lengthValue=INT lengthUnit=LengthUnit 'long'?)?) LF
	needles+=Needle (LF? needles+=Needle)*;

Needle:
	name=ID label=STRING ('(' withKey=WithKey ')')?;

	// Yarn
SingleYarnWithYarnType returns Yarn:
	quantitySpec=WeightAndLengthSpec
	'of' yarnTypeSpec=YarnTypeSpec
	('in' 'color'? color=YarnColor)?
	('named' name=ID)?
	withKey=WithKey?;

MultipleYarnsWithYarnType:
	yarnTypeSpec=YarnTypeSpec
	(LF yarns+=YarnRule (','? LF? yarns+=YarnRule)*)?;

YarnRule returns Yarn:
	((quantitySpec=WeightAndLengthSpec ':') |
	('in' 'color'? color=YarnColor ':') |
	((quantitySpec=WeightAndLengthSpec) ('in' color=YarnColor) ':'))?
	'yarn'? name=ID withKey=WithKey?;

Yarn:
	name=ID
	quantitySpec=WeightAndLengthSpec
	color=YarnColor
	withKey=WithKey
	yarnTypeSpec=YarnTypeSpec;

WeightAndLengthSpec:
	((weightValue=INT weightUnit=WeightUnit) |
	(lengthValue=INT lengthUnit=LengthUnit) |
	(weightValue=INT weightUnit=WeightUnit
	'(' lengthValue=INT lengthUnit=LengthUnit ')'));

YarnTypeSpec:
	((brand=STRING) |
	(brand=STRING category=STRING) |
	(brand=STRING category=STRING subcategory=STRING) |
	weight=(ID | STRING) 'weight' 'yarn'?)
	('#' (catalogId=(ID | STRING) | catalogNumber=INT))?
	('('
	(weight=(ID | STRING) 'weight')?
	(','? ('ball' | 'skein') 'weight: ' ballWeightValue=INT ballWeightUnit=WeightUnit)?
	(','? ('ball' | 'skein') 'length: ' ballLengthValue=INT ballLengthUnit=LengthUnit)?
	(','? 'yarn'? 'thickness: ' thicknessValue=INT thicknessUnit=ThicknessUnit)?
	')')?;

YarnColor:
	colorName=(ID | STRING)
	('(' colorNumber=INT ')')?;

Gauge:
	(stitchValue=INT | stitchDecimalValue=DECIMAL) stitchUnit=StitchGaugeUnit (',' (rowValue=INT |
	rowDecimalValue=DECIMAL) rowUnit=RowGaugeUnit)?;

InstructionDefinitionRule returns Instruction:
	'Instruction' name=ID label=STRING? ('(' (withKey=WithKey)? (','? shape=('round' | 'flat') 'shape'?) (','?
	rowCount=INT ('rows' | 'rounds')?)? ')')? ':' LF
	rows+=Row+;

InlineInstructionDefinitionRule returns InlineInstruction:
	name=ID label=STRING? (withKey=WithKey)?':' LF?
	operations+=InlineDefinitionOperation (',' operations+=InlineDefinitionOperation)* => LF?;

	// directions elements
Section:
	elements+=BlockOperation+;

InstructionGroup:
	'Group' name=ID label=STRING? ('(' (withKey=WithKey)? (','? reset?='reset' 'count'?)? ')')? ':' LF+
	operations+=BlockOperation (LF* operations+=BlockOperation)*;

InstructionGroupWithSections:
	'Group' name=ID label=STRING? ('(' (withKey=WithKey)? (','? reset?='reset' 'count'?)? ')')? ':' LF+
	(operations+=Section (LF+ operations+=Section)*);

	// block operations
BlockOperation:
	(UseNeedles | UseSilentNeedles | ArrangeStitches | CastOn | InstructionRule | InstructionRef | Row | RepeatInstruction
	|
	Message | JoinInRound | BeginKnittingNewShape | LabelNeedle | Graft);

UseNeedles:
	'Use' needles+=[Needle] (',' needles+=[Needle])* => LF?;

UseSilentNeedles:
	'(' 'Use' needles+=[Needle] (',' needles+=[Needle])* ')' => LF?;

ArrangeStitches:
	'Arrange' StitchLiteral? ('as' 'follows')? ':' LF?
	needleStitchCount+=NeedleStitchCount
	((',' | LF) needleStitchCount+=NeedleStitchCount)* => LF?;

NeedleStitchCount:
	needle=[Needle] ':' numberOfStitches=INT;

CastOn:
	('Cast on' | 'CO' | 'co') value=INT StitchLiteral? ('with' yarnRef=ID)? ('using' 'the' style=ID 'method')?
	(countAsRow?='(count as row)')? => LF?;

InstructionRule returns Instruction:
	'Instruction' name=ID label=STRING? ('(' (withKey=WithKey)? (','? shape=('round' | 'flat') 'shape'?)? (','?
	rowCount=INT ('rows' | 'rounds')?)? ')')? (('{' LF* rows+=Row (LF* rows+=Row)* LF* '}' => LF?) | (':' LF rows+=Row+
	LF));

Instruction:
	name=ID
	label=STRING
	withKey=WithKey
	shape=STRING
	rowCount=INT
	rows+=Row;

InstructionRef:
	'Work' instruction=[Instruction] 'instruction'?;

MergedInstruction:
	'Merge' instruction1=[Instruction] 'instruction'? 'with' instruction2=[Instruction] 'at' 'row';

Row:
	nextRow?='Next'? (shortRow?='Short'? & longRow?='Long'?) label=('Row' | 'Round' | 'Rows' | 'Rounds')
	((range+=Range | number+=INT) (',' (range+=Range | number+=INT))*
	('and' 'all'? subsequent=('even' | 'odd') ('rows' | 'rounds')?)?)?
	(side=('WS' | 'RS')? &
	('with' yarnRef=[Yarn])?) ('(' (','? inform?='state' 'side')? (','? reset?='reset' 'count'?)?
	')')? ':' LF?
	((operations+=InlineOperation (',' LF? operations+=InlineOperation)*) | (operations+=UsingNeedle (LF
	operations+=UsingNeedle)*)) (',' LF? stateStitches?='state' numberToState=INT? StitchLiteral?)? (',' LF?
	followupMessage=STRING)? => LF?;

RepeatInstruction:
	'Repeat' instruction=[Instruction] (('for' desiredLength?='desired length') | ('until' value=INT ('st' | 'sts')
	remain?='remain') |
	// TODO: difficult! (value=INT ('st' | 'sts') remainOnNeedles?='remain on' ('needle' | 'needles')) |
	// TODO: UNTIL_EQUALS
	(('for' | ('until' 'measures')) (value=INT | decimalValue=DECIMAL) unit=LengthUnit) | (value=INT
	additionalTimes?=('additional' | 'more') TimesLiteral)) => LF?;

Message:
	label=STRING ('(' 'key'? messageKey=(ID | STRING) ')')? => LF;

JoinInRound:
	{JoinInRound} 'Join' StitchLiteral? 'together'? 'in' 'round' => LF;

BeginKnittingNewShape:
	'Begin' 'knitting'
	((shape='flat' 'with' side=('WS' | 'RS') 'row'? 'next') |
	('in' 'the' shape='round')) => LF;

LabelNeedle:
	'Label' needle=[Needle] 'as' label=STRING ('(' withKey=WithKey ')')?;

Graft:
	'Graft' 'together'? (StitchLiteral 'from')? firstNeedle=[Needle] 'and' secondNeedle=[Needle] => LF?;
	
	// Inline Operations
InlineDefinitionOperation:
	(InlinePickUpStitches |
	Knit | Purl | Slip |
	Decrease | DoubleDecrease | PassPreviousStitchOver |
	Increase |
	PlaceMarker | RemoveMarker | EndOfRow |
	Repeat | BindOff | Turn);

InlineOperation:
	(InlineDefinitionOperation | InlineInstructionRule | InlineInstructionRef);

InlinePickUpStitches:
	'pick' 'up' number=INT StitchLiteral? wise=Wise? ('with'? yarnRef=[Yarn])?;

Knit:
	('K' | 'k' | 'Knit' | 'knit') {Knit} number=INT? StitchLiteral? (together?=('tog')? & throughTrailingLoop?=('tbl' |
	'ttl')?) ('with'? yarnRef=[Yarn])? ('to'? repeat=RepeatSpec)?;

Purl:
	('P' | 'p' | 'Purl' | 'purl') {Purl} number=INT? StitchLiteral? (together?=('tog')? & throughTrailingLoop?=('tbl' |
	'ttl')?) ('with'? yarnRef=[Yarn])? ('to'? repeat=RepeatSpec)?;

Slip:
	{Slip} reverse?=('Rev' | 'Reverse' | 'rev' | 'reverse')? ('Sl' | 'sl' | 'Slip' | 'slip') ((number=INT StitchLiteral?)
	| 'next st')? wise=Wise? yarnPosition=('wyif' | 'wyib')?;

Decrease:
	type=DecreaseType (number=INT TimesLiteral?)? ('with'? yarnRef=[Yarn])?;

DoubleDecrease:
	type=DoubleDecreaseType (number=INT TimesLiteral?)? ('with'? yarnRef=[Yarn])?;

PassPreviousStitchOver:
	{PassPreviousStitchOver} 'ppso' (number=INT TimesLiteral?)?;

Increase:
	type=IncreaseType (number=INT TimesLiteral?)? ('with'? yarnRef=[Yarn])?;

PlaceMarker:
	{PlaceMarker} (('place' 'marker') | 'pm');

RemoveMarker:
	{RemoveMarker} (('remove' 'marker') | 'rm');

EndOfRow:
	{EndOfRow} ('end' 'of' ('row' | 'round'));

InlineInstructionRule returns InlineInstruction:
	'instruction' name=ID label=STRING? ('(' (withKey=WithKey) ')')? ':' LF?
	'[' operations+=InlineOperation (',' operations+=InlineOperation)* ']';

InlineInstruction:
	name=ID
	label=STRING
	withKey=WithKey
	operations+=InlineOperation;

InlineInstructionRef:
	referencedInstruction=[InlineInstruction];

Repeat:
	(('Repeat' | 'repeat') '[' operations+=InlineOperation (',' operations+=InlineOperation)* ']' 'to'? spec=RepeatSpec) |
	('[' operations+=InlineOperation (',' operations+=InlineOperation)* ']' (',' ('Repeat' | 'repeat'))? 'to'?
	spec=RepeatSpec);

BindOff:
	('Bind off' | 'bind off' | 'BO' | 'bo') (all?='all' | value=INT) StitchLiteral? wise=Wise? ('with' yarnRef=ID)?;

RepeatSpec:
	(toEnd?=('end') | toMarker?=('marker') | (value=INT StitchLiteral? beforeEnd?=('before end')) | (value=INT
	StitchLiteral? beforeGap?=('before gap')) | (value=INT StitchLiteral? beforeMarker?=('before marker')) | (value=INT
	times?=(TimesLiteral)));

Turn:
	{Turn} 'turn' (stateUnworked?='(' 'state' number=INT? 'unworked' StitchLiteral? ')')?;

UsingNeedle:
	'Using' needle=[Needle] ':' LF? operations+=InlineOperation (',' LF? operations+=InlineOperation)*;

	// lower-level data types
enum DecreaseType:
	SSK='ssk' | SSP='ssp' | SKP='skp';

enum DoubleDecreaseType:
	SSSK='sssk' | CDD='cdd' | SK2P='sk2p' | CDD='s2kp';

enum IncreaseType:
	M1='m1' | M1P='m1p' | M1A='m1a' | M1T='m1t' | M1L='m1l' | M1R='m1r' | M1LP='m1lp' | M1RP='m1rp' | KLL='kll' |
	KRL='krl' | PLL='pll' | PRL='prl' | KFB='kfb' | PFB='pfb' | MOSS='moss' | DECORATIVE='decorative' | YO='yo';

enum Language:
	EN='English' | ES='Spanish' | FR='French';

enum LengthUnit:
	INCH='in' | CM='cm' | YARD='yd' | METER='m' | INCH='ins' | INCH='inch' | INCH='inches' | CM='cms' | CM='centimeter' |
	CM='centimeters' | YARD='yds';

enum WeightUnit:
	GRAM='g' | OUNCE='oz' | GRAM='gram' | GRAM='grams' | OUNCE='ounce' | OUNCE='ounces';

enum ThicknessUnit:
	WRAPS_PER_INCH='wrap/in' | WRAPS_PER_CENTIMETER='wrap/cm' | WRAPS_PER_INCH='wraps/in' | WRAPS_PER_INCH='wraps/inch' |
	WRAPS_PER_INCH='wpi' | WRAPS_PER_CENTIMETER='wraps/cm';

enum StitchGaugeUnit:
	STITCHES_PER_INCH='st/in' | STITCHES_PER_CENTIMETER='st/cm' |
	STITCHES_PER_INCH='sts/in' | STITCHES_PER_CENTIMETER='sts/cm';

enum RowGaugeUnit:
	ROWS_PER_INCH='row/in' | ROWS_PER_CENTIMETER='row/cm' |
	ROWS_PER_INCH='rows/in' | ROWS_PER_CENTIMETER='rows/cm';

enum NeedleSizeUnit:
	US='US' | MILLIMETERS='mm';

enum NeedleStyle:
	STRAIGHT='straight' |
	CIRCULAR='circular' |
	DPN='dpn' |
	DPN='dpns' |
	CIRCULAR='circ' |
	CIRCULAR='circulars';

enum Wise:
	NONE='default' | KNITWISE='kw' | PURLWISE='pw' |
	KNITWISE='knitwise' | PURLWISE='purlwise';

StitchLiteral returns ecore::EString:
	'st' | 'sts' | 'stitch' | 'stitches';

TimesLiteral returns ecore::EString:
	'time' | 'times';

WithKey:
	{WithKey} 'with' 'key' messageKey=STRING?;

Range:
	min=INT '-' max=INT;

	// Terminals
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '-')+;

terminal DECIMAL returns ecore::EDoubleObject:
	('0'..'9')+ '.' ('0'..'9')+;

terminal MULTIPLE_ZEROS returns ecore::EString:
	'0' '0'+;

terminal INT returns ecore::EIntegerObject:
	('0'..'9')+;

terminal STRING:
	'"' ('\\'
	('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') |
	!('\\' | '"'))* '"' |
	"'" ('\\'
	('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') |
	!('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

	//terminal SL_COMMENT:
//	'//' !('\n' | '\r')* ('\r'? '\n')?;
terminal SL_COMMENT:
	'--' !('\n' | '\r')* ('\r'? '\n')?;

terminal LF:
	'\r'? '\n';

terminal WS:
	(' ' | '\t')+;

terminal ANY_OTHER:
	.;
