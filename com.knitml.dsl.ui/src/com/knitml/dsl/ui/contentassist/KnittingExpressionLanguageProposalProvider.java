/*
* generated by Xtext
*/
package com.knitml.dsl.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class KnittingExpressionLanguageProposalProvider extends AbstractKnittingExpressionLanguageProposalProvider {

	protected ICompletionProposal createCompletionProposal(String proposal, EObject model, ContentAssistContext context) {
		return createCompletionProposal(proposal, new StyledString(proposal), getImage(model), 1000, context.getPrefix(), context);
	}
	
	@Override
	public void completeRow_Inform(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("state side):", model, context));
		acceptor.accept(createCompletionProposal("state side, reset count):", model, context));
	}
	
	@Override
	public void completeRow_Reset(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("reset count):", model, context));
	}

	@Override
	public void completeInstructionGroup_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		String proposal = "Group-ID";
		acceptor.accept(createCompletionProposal(proposal, model, context));
	}
	
	@Override
	public void completeInstructionGroup_Reset(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("reset count):", model, context));
	}
	
	@Override
	public void completeInstructionGroup_WithKey(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("with key):", model, context));
		acceptor.accept(createCompletionProposal("with key ", model, context));
		acceptor.accept(createCompletionProposal("with key, reset count):", model, context));
	}

	@Override
	public void completeInstructionGroupWithSections_Reset(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		this.completeInstructionGroup_Reset(model, assignment, context, acceptor);
	}
	
	@Override
	public void completeInstructionGroupWithSections_WithKey(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		this.completeInstructionGroup_WithKey(model, assignment, context, acceptor);
	}


}
